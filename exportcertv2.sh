#!/bin/bash
##################################################################################################
# Date: 06.02.2025                                                                               #
# Author: Uli Guenter (ipv6@clarisweb.de)                                                        #
# This script reads the 'acme.json' file, extracts certificates and keys for specified domains,  #
# checks if the certificate matches the key, and optionally exports them as PFX files.           #
# Requirements: Install 'jq' for JSON processing and 'openssl' for certificate handling.         #
# Tested with acme.json generated by Traefik 2.3                                                 #
##################################################################################################

# Check if acme.json is present
if [[ ! -f "acme.json" ]]; then
    echo "\nError: file not found: acme.json.\nPlease ensure the file is in the same directory as the script.\n"
    exit 1
fi

# Read the 'acme.json' file. Ensure this file is in the same directory as the script.
json=$(cat acme.json)

# Create a directory to store all certificates.
mkdir -p output/

# Function to export certificate and key for a given domain.
exp_cer_key () {
    local domain="$1"  # Store domain in a local variable
    local cert_file="output/$domain.cer"
    local key_file="output/$domain.key"

    # Extract certificate
    cert_content=$(echo "$json" | jq -r '.[].Certificates[] | select(.domain.main == "'"$domain"'") | .certificate' | base64 -d 2>/dev/null)
    if [[ -z "$cert_content" ]]; then
        echo "Error: Failed to extract certificate for domain '$domain'."
        return 1
    fi
    echo "$cert_content" > "$cert_file"

    # Extract key
    key_content=$(echo "$json" | jq -r '.[].Certificates[] | select(.domain.main == "'"$domain"'") | .key' | base64 -d 2>/dev/null)
    if [[ -z "$key_content" ]]; then
        echo "Error: Failed to extract key for domain '$domain'."
        return 1
    fi
    echo "$key_content" > "$key_file"

    echo "Successfully exported certificate and key for '$domain'."
    return 0
}


# Function to create a PFX file from the certificate and key for a given domain.
exp_pfx () {
    openssl pkcs12 -export -out output/$domain.pfx -inkey output/$domain.key -in output/$domain.cer -passout pass:
}

# Prompt user to check if they want to export as a .pfx file as well.
read -p "Do you want to export the certificate and key as .pfx file as well? [y/N]: " REPLY

# Iterate through all domains and export certificates and keys.
for domain in $(echo "$json" | jq -r '.[].Certificates[].domain.main'); do
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        exp_cer_key "$domain"
        exp_pfx "$domain"
    else
        exp_cer_key "$domain"
    fi
done

# Check if the certificate and key match   
   hash1=$(openssl pkey -in output/$domain.key -pubout -outform pem | sha256sum)
   hash2=$(openssl x509 -in output/$domain.cer -pubkey -noout -outform pem | sha256sum)
   echo "\n***** Certificate details"
   echo "***   Check Key and Certificate match \n***   $domain.key = "$hash1
   echo "***   $domain.cer = "$hash2
   
    
   # Compare the two hashes
if [[ "$hash1" == "$hash2" ]]; then
    echo "***** Success: The certificate and key match.\n"
    # Your script continues here
else
    echo "Error: certificate and key do not match. Exiting script..."
    exit 1
fi
# Prompt the user
read -p "Do you want to view extended certificate details? [y/N]: " REPLY

# Check the user's input
if [[ $REPLY =~ ^[Yy]$ ]]; then
echo "*** start-date:             "$(openssl x509 -startdate -noout -in output/$domain.cer | cut -d= -f2)
echo "*** expiry-date:            "$(openssl x509 -enddate -noout -in output/$domain.cer | cut -d= -f2)
echo "*** issuer:                 "$(openssl x509 -issuer -noout -in output/$domain.cer | cut -d= -f4 )
echo "*** common-name:            "$(openssl x509 -subject -noout -in output/$domain.cer | cut -d= -f3)
echo "*** subject-alternate-name: $(openssl x509 -text -noout -in output/$domain.cer | grep -A1 "Subject Alternative Name" | tail -n1 | sed 's/X509v3 Subject Alternative Name: //' | tr -s ' ' | sed 's/^ //')"
echo "*** serial-#:               "$(openssl x509 -serial -noout -in output/$domain.cer | cut -d= -f2)
echo "*** sha256-fingerprint:     "$(openssl x509 -fingerprint -sha256 -noout -in output/$domain.cer | cut -d= -f2)
echo "*** md5-fingerprint:        "$(openssl x509 -fingerprint -md5 -noout -in output/$domain.cer | cut -d= -f2)

else
    echo "Skipping certificate details...\n"
fi
echo "\n***** Done!\n"


